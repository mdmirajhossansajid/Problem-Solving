#include <bits/stdc++.h>
using namespace std;

// Node class for singly linked list
class Node {
public:
    int val;
    Node* next;

    Node(int val) {
        this->val = val;
        this->next = NULL;
    }
};

// Global size tracker
int sz = 0;

// Insert at head
void insert_at_head(Node* &head, Node* &tail, int val) {
    Node* newNode = new Node(val);
    sz++;
    if (head == NULL) {
        head = tail = newNode;
        return;
    }
    newNode->next = head;
    head = newNode;
}

// Insert at tail
void insert_at_tail(Node* &head, Node* &tail, int val) {
    Node* newNode = new Node(val);
    sz++;
    if (head == NULL) {
        head = tail = newNode;
        return;
    }
    tail->next = newNode;
    tail = newNode;
}

// Insert at specific position (0-based index)
void insert_at_position(Node* &head, int idx, int val) {
    Node* newNode = new Node(val);
    sz++;
    Node* temp = head;
    for (int i = 0; i < idx - 1; i++) {
        temp = temp->next;
    }
    newNode->next = temp->next;
    temp->next = newNode;
}

// Print the linked list
void print_list(Node* head) {
    Node* temp = head;
    while (temp != NULL) {
        cout << temp->val << " ";
        temp = temp->next;
    }
    cout << endl;
}

// Delete head node
void delete_at_head(Node* &head) {
    if (head == NULL) return;
    Node* temp = head;
    head = head->next;
    delete temp;
    sz--;
}

// Delete tail node (idx should be size - 1)
void delete_at_tail(Node* &head, Node* &tail, int idx) {
    Node* temp = head;
    for (int i = 0; i < idx - 1; i++) {
        temp = temp->next;
    }
    Node* deleteNode = temp->next;
    temp->next = temp->next->next;
    tail = temp;
    delete deleteNode;
    sz--;
}

// Delete node at any index (except head)
void delete_at_position(Node* head, int idx) {
    Node* temp = head;
    for (int i = 0; i < idx - 1; i++) {
        temp = temp->next;
    }
    Node* deleteNode = temp->next;
    temp->next = temp->next->next;
    delete deleteNode;
    sz--;
}

// Get size of the list
int get_size(Node* head) {
    return sz;
}

// Print the list in reverse (doesn't modify it)
void reverse_print(Node* temp) {
    if (temp == NULL) return;
    reverse_print(temp->next);
    cout << temp->val << " ";
}

int main() {
    Node* head = NULL;
    Node* tail = NULL;

    // Input until -1
    int x;
    while (cin >> x && x != -1) {
        insert_at_tail(head, tail, x);
    }

    cout << "Original List: ";
    print_list(head);

    cout << "Reverse Print: ";
    reverse_print(head);
    cout << endl;

    delete_at_head(head);
    cout << "After Deleting Head: ";
    print_list(head);

    delete_at_tail(head, tail, 3); // Assumes list has at least 4 elements
    cout << "After Deleting Tail (idx=3): ";
    print_list(head);

    delete_at_position(head, 1); // Assumes at least 2 elements
    cout << "After Deleting at Position 1: ";
    print_list(head);

    return 0;
}
