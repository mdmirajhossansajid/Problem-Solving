#include<bits/stdc++.h>
using namespace std;
class Edge{
    public:
    int a,b,c;
    Edge(int a,int b,int c)
    {
        this->a=a;
        this->b=b;
        this->c=c;
    }

};
int dis[1005];
vector<Edge>edgelist;
int n,e;
void bellmanford()
{
    for(int i=0;i<n-1;i++)
    {
        for(auto ed:edgelist)
        {
            int a,b,c;
            a=ed.a;
            b=ed.b;
            c=ed.c;
            if(dis[a]!=INT_MAX && dis[a]+c<dis[b])
                dis[b]=dis[a]+c;
        }
    }
//extra one loop & check the previous value change or not, if the value change then the cycle is there;
bool cycle=false;
    for (auto ed : edgelist)
    {
        int a, b, c;
        a = ed.a;
        b = ed.b;
        c = ed.c;
        if (dis[a] != INT_MAX && dis[a] + c < dis[b])
           {
            cycle=true;
            break;
           }
    }
    if(cycle)
       cout<<"Cycle Detected";
    else
        cout << " No Cycle Detected";
}

int main()
{
    cin>>n>>e;
    while(e--)
    {
        int a,b,c;cin>>a>>b>>c;
        edgelist.push_back(Edge(a,b,c));
    }
    for(int i=0;i<n;i++)
    {
        dis[i]=INT_MAX;
    }
    bellmanford();
    
    return 0;
}
